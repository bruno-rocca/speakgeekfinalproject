{"ts":1362867059845,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\nfunction Services_Twilio_autoload($className) {\n    if (substr($className, 0, 15) != 'Services_Twilio') {\n        return false;\n    }\n    $file = str_replace('_', '/', $className);\n    $file = str_replace('Services/', '', $file);\n    return include dirname(__FILE__) . \"/$file.php\";\n}\n\nspl_autoload_register('Services_Twilio_autoload');\n\n/**\n * Twilio API client interface.\n *\n * @category Services\n * @package  Services_Twilio\n * @author   Neuman Vong <neuman@twilio.com>\n * @license  http://creativecommons.org/licenses/MIT/ MIT\n * @link     http://pear.php.net/package/Services_Twilio\n */\nclass Services_Twilio extends Services_Twilio_Resource\n{\n    const USER_AGENT = 'twilio-php/3.10.0';\n\n    protected $http;\n    protected $retryAttempts;\n    protected $last_response;\n    protected $version;\n    protected $versions = array('2008-08-01', '2010-04-01');\n\n    /**\n     * Constructor.\n     *\n     * @param string               $sid      Account SID\n     * @param string               $token    Account auth token\n     * @param string               $version  API version\n     * @param Services_Twilio_Http $_http    A HTTP client\n     * @param int                  $retryAttempts Number of times to retry failed requests\n     */\n    public function __construct(\n        $sid,\n        $token,\n        $version = null,\n        Services_Twilio_TinyHttp $_http = null,\n        $retryAttempts = 1\n    ) {\n        $this->version = in_array($version, $this->versions) ?\n                $version : end($this->versions);\n\n        if (null === $_http) {\n            if (!in_array('curl', get_loaded_extensions())) {\n                trigger_error(\"It looks like you do not have curl installed.\\n\". \n                    \"Curl is required to make HTTP requests using the twilio-php\\n\" .\n                    \"library. For install instructions, visit the following page:\\n\" . \n                    \"http://php.net/manual/en/curl.installation.php\",\n                    E_USER_WARNING\n                );\n            }\n            $_http = new Services_Twilio_TinyHttp(\n                \"https://api.twilio.com\",\n                array(\"curlopts\" => array(\n                    CURLOPT_USERAGENT => self::USER_AGENT,\n                    CURLOPT_HTTPHEADER => array('Accept-Charset: utf-8'),\n                    CURLOPT_CAINFO => dirname(__FILE__) . '/cacert.pem',\n                ))\n            );\n        }\n        $_http->authenticate($sid, $token);\n        $this->http = $_http;\n        $this->accounts = new Services_Twilio_Rest_Accounts($this, \"/{$this->version}/Accounts\");\n        $this->account = $this->accounts->get($sid);\n        $this->retryAttempts = $retryAttempts;\n    }\n\n    /**\n     * Get the api version used by the rest client\n     *\n     * @return string the API version in use\n     */\n    public function getVersion() {\n        return $this->version;\n    }\n\n    /**\n     * Get the retry attempt limit used by the rest client\n     *\n     * @return int the number of retry attempts\n     */\n    public function getRetryAttempts() {\n        return $this->retryAttempts;\n    }\n\n    /**\n     * Construct a URI based on initial path, query params, and paging \n     * information\n     *\n     * We want to use the query params, unless we have a next_page_uri from the \n     * API.\n     *\n     * @param string $path The request path (may contain query params if it's \n     *      a next_page_uri)\n     * @param array $params Query parameters to use with the request\n     * @param boolean $full_uri Whether the $path contains the full uri\n     *\n     * @return string the URI that should be requested by the library\n     */\n    public static function getRequestUri($path, $params, $full_uri = false) {\n        $json_path = $full_uri ? $path : \"$path.json\";\n        if (!$full_uri && !empty($params)) {\n            $query_path = $json_path . '?' . http_build_query($params, '', '&');\n        } else {\n            $query_path = $json_path;\n        }\n        return $query_path;\n    }\n\n    /**\n     * Helper method for implementing request retry logic\n     *\n     * @param array  $callable      The function that makes an HTTP request\n     * @param string $uri           The URI to request\n     * @param int    $retriesLeft   Number of times to retry\n     *\n     * @return object The object representation of the resource\n     */\n    protected function _makeIdempotentRequest($callable, $uri, $retriesLeft) {\n        $response = call_user_func_array($callable, array($uri));\n        list($status, $headers, $body) = $response;\n        if ($status >= 500 && $retriesLeft > 0) {\n            return $this->_makeIdempotentRequest($callable, $uri, $retriesLeft - 1);\n        } else {\n            return $this->_processResponse($response);\n        }\n    }\n\n    /**\n     * GET the resource at the specified path.\n     *\n     * @param string $path   Path to the resource\n     * @param array  $params Query string parameters\n     * @param boolean  $full_uri Whether the full URI has been passed as an \n     *      argument\n     *\n     * @return object The object representation of the resource\n     */\n    public function retrieveData($path, array $params = array(), \n        $full_uri = false\n    ) {\n        $uri = self::getRequestUri($path, $params, $full_uri);\n        return $this->_makeIdempotentRequest(array($this->http, 'get'), \n            $uri, $this->retryAttempts);\n    }\n\n    /**\n     * DELETE the resource at the specified path.\n     *\n     * @param string $path   Path to the resource\n     * @param array  $params Query string parameters\n     *\n     * @return object The object representation of the resource\n     */\n    public function deleteData($path, array $params = array())\n    {\n        $uri = self::getRequestUri($path, $params);\n        return $this->_makeIdempotentRequest(array($this->http, 'delete'), \n            $uri, $this->retryAttempts);\n    }\n\n    /**\n     * POST to the resource at the specified path.\n     *\n     * @param string $path   Path to the resource\n     * @param array  $params Query string parameters\n     *\n     * @return object The object representation of the resource\n     */\n    public function createData($path, array $params = array())\n    {\n        $path = \"$path.json\";\n        $headers = array('Content-Type' => 'application/x-www-form-urlencoded');\n        $response = $this->http->post(\n            $path, $headers, http_build_query($params, '', '&')\n        );\n        return $this->_processResponse($response);\n    }\n\n    /**\n     * Convert the JSON encoded resource into a PHP object.\n     *\n     * @param array $response 3-tuple containing status, headers, and body\n     *\n     * @return object PHP object decoded from JSON\n     * @throws Services_Twilio_RestException (Response in 300-500 class)\n     */\n    private function _processResponse($response)\n    {\n        list($status, $headers, $body) = $response;\n        if ($status === 204) {\n            return true;\n        }\n        $decoded = json_decode($body);\n        if ($decoded === null) {\n            throw new Services_Twilio_RestException(\n                $status,\n                'Could not decode response body as JSON. ' . \n                'This likely indicates a 500 server error'\n            );\n        }\n        if (200 <= $status && $status < 300) {\n            $this->last_response = $decoded;\n            return $decoded;\n        }\n        throw new Services_Twilio_RestException(\n            $status,\n            isset($decoded->message) ? $decoded->message : '',\n            isset($decoded->code) ? $decoded->code : null,\n            isset($decoded->more_info) ? $decoded->more_info : null\n        );\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7632}]],"length":7632}
