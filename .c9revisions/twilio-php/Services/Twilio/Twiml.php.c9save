{"ts":1362867073793,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n\n/**\n * Exception class for Services_Twilio_Twiml.\n */\nclass Services_Twilio_TwimlException extends Exception {}\n\n/**\n * Twiml response generator.\n *\n * @category Services\n * @package  Services_Twilio\n * @author   Neuman Vong <neuman at ashmoremusic dot com>\n * @license  http://creativecommons.org/licenses/MIT/ MIT\n * @link     https://gist.github.com/855985\n */\nclass Services_Twilio_Twiml\n{\n\n    protected $element;\n\n    /**\n     * Constructs a Twiml response.\n     *\n     * @param SimpleXmlElement|array $arg:\n     *   - the element to wrap\n     *   - attributes to add to the element\n     *   - if null, initialize an empty element named 'Response'\n     */\n    public function __construct($arg = null)\n    {\n        switch (true) {\n        case $arg instanceof SimpleXmlElement:\n            $this->element = $arg;\n            break;\n        case $arg === null:\n            $this->element = new SimpleXmlElement('<Response/>');\n            break;\n        case is_array($arg):\n            $this->element = new SimpleXmlElement('<Response/>');\n            foreach ($arg as $name => $value) {\n                $this->element->addAttribute($name, $value);\n            }\n            break;\n        default:\n            throw new TwimlException('Invalid argument');\n        }\n    }\n\n    /**\n     * Converts method calls into Twiml verbs.\n     *\n     * A basic example:\n     *\n     *     php> print $this->say('hello');\n     *     <Say>hello</Say>\n     *\n     * An example with attributes:\n     *\n     *     php> print $this->say('hello', array('voice' => 'woman'));\n     *     <Say voice=\"woman\">hello</Say>\n     *\n     * You could even just pass in an attributes array, omitting the noun:\n     *\n     *     php> print $this->gather(array('timeout' => '20'));\n     *     <Gather timeout=\"20\"/>\n     *\n     * @param string $verb The Twiml verb.\n     * @param array  $args:\n     *   - (noun string)\n     *   - (noun string, attributes array)\n     *   - (attributes array)\n     *\n     * @return SimpleXmlElement A SimpleXmlElement\n     */\n    public function __call($verb, array $args)\n    {\n        list($noun, $attrs) = $args + array('', array());\n        if (is_array($noun)) {\n            list($attrs, $noun) = array($noun, '');\n        }\n        /* addChild does not escape XML, while addAttribute does. This means if \n         * you pass unescaped ampersands (\"&\") to addChild, you will generate \n         * an error. \n         *\n         * Some inexperienced developers will pass in unescaped ampersands, and \n         * we want to make their code work, by escaping the ampersands for them \n         * before passing the string to addChild. (with htmlentities)\n         *\n         * However other people will know what to do, and their code \n         * already escapes ampersands before passing them to addChild. We don't \n         * want to break their existing code by turning their &amp;'s into \n         * &amp;amp;\n         *\n         * We also want to use numeric entities, not named entities so that we\n         * are fully compatible with XML\n         *\n         * The following lines accomplish the desired behavior.\n         */\n        $decoded = html_entity_decode($noun, ENT_COMPAT, 'UTF-8');\n        $normalized = htmlspecialchars($decoded, ENT_COMPAT, 'UTF-8', false);\n        $child = empty($noun)\n            ? $this->element->addChild(ucfirst($verb))\n            : $this->element->addChild(ucfirst($verb), $normalized);\n        foreach ($attrs as $name => $value) {\n            /* Note that addAttribute escapes raw ampersands by default, so we \n             * haven't touched its implementation. So this is the matrix for \n             * addAttribute:\n             *\n             * & turns into &amp;\n             * &amp; turns into &amp;amp;\n             */\n            if (is_bool($value)) {\n                $value = ($value === true) ? 'true' : 'false';\n            }\n            $child->addAttribute($name, $value);\n        }\n        return new self($child);\n    }\n\n    /**\n     * Returns the object as XML.\n     *\n     * @return string The response as an XML string\n     */\n    public function __toString()\n    {\n        $xml = $this->element->asXml();\n        return str_replace(\n            '<?xml version=\"1.0\"?>', \n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>', $xml);\n    }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":4319}]],"length":4319}
